<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="io.milkt.onelab.organization.dao.RequirementDao">

<resultMap id="requirementDOResult" type="io.milkt.onelab.organization.domain.RequirementDO">
    <result column="type" property="type"/>
    <result column="lab_id" property="labId"/>
    <result column="organization_id" property="organizationId"/>
    <result column="description" property="description"/>
    <result column="fee_range" property="feeRange"/>
    <result column="published_time" property="publishedTime"/>
    <result column="recruit_time_limit" property="recruitTimeLimit"/>
    <result column="recruit_finish_time" property="recruitFinishTime"/>
    <result column="task_finish_limit" property="taskFinishLimit"/>
    <result column="fee" property="fee"/>
    <result column="status" property="status"/>
    <result column="images" property="images"/>
    <result column="accepted" property="accepted"/>
    <result column="id" property="id"/>
    <result column="gmt_create" property="gmtCreate"/>
    <result column="gmt_modified" property="gmtModified"/>
</resultMap>

<sql id="requirementDO_columns">
    type,
    lab_id,
    organization_id,
    description,
    fee_range,
    published_time,
    recruit_time_limit,
    recruit_finish_time,
    task_finish_limit,
    fee,
    status,
    images,
    accepted,
    id,
    gmt_create,
    gmt_modified
</sql>

<sql id="requirementDO_sqlForInsert">
    type,
    lab_id,
    organization_id,
    description,
    fee_range,
    published_time,
    recruit_time_limit,
    recruit_finish_time,
    task_finish_limit,
    fee,
    status,
    images,
    accepted,
    id,
    gmt_create,
    gmt_modified
</sql>

<sql id="requirementDO_columnsForInsert">
    #{type},
    #{labId},
    #{organizationId},
    #{description},
    #{feeRange},
    #{publishedTime},
    #{recruitTimeLimit},
    #{recruitFinishTime},
    #{taskFinishLimit},
    #{fee},
    #{status},
    #{images},
    #{accepted},
    #{id},
    now(),
    now()
</sql>

<sql id="requirementDO_setterForUpdate">
    <set>
        gmt_modified = now(),
        <if test="type != null">
            type = #{type},
        </if>
        <if test="labId != null">
            lab_id = #{labId},
        </if>
        <if test="organizationId != null">
            organization_id = #{organizationId},
        </if>
        <if test="description != null">
            description = #{description},
        </if>
        <if test="feeRange != null">
            fee_range = #{feeRange},
        </if>
        <if test="publishedTime != null">
            published_time = #{publishedTime},
        </if>
        <if test="recruitTimeLimit != null">
            recruit_time_limit = #{recruitTimeLimit},
        </if>
        <if test="recruitFinishTime != null">
            recruit_finish_time = #{recruitFinishTime},
        </if>
        <if test="taskFinishLimit != null">
            task_finish_limit = #{taskFinishLimit},
        </if>
        <if test="fee != null">
            fee = #{fee},
        </if>
        <if test="status != null">
            status = #{status},
        </if>
        <if test="images != null">
            images = #{images},
        </if>
        <if test="accepted != null">
            accepted = #{accepted},
        </if>
    </set>
</sql>

<sql id="requirementDO_selector">
    select
    <include refid="requirementDO_columns"/>
    from requirement
</sql>

<sql id="requirementDO_query_segment">
    <trim prefix="WHERE" prefixOverrides="AND|OR">
        <if test="data.type != null">
            AND type = #{data.type}
        </if>
        <if test="data.labId != null">
            AND lab_id = #{data.labId}
        </if>
        <if test="data.organizationId != null">
            AND organization_id = #{data.organizationId}
        </if>
        <if test="data.description != null">
            AND description = #{data.description}
        </if>
        <if test="data.feeRange != null">
            AND fee_range = #{data.feeRange}
        </if>
        <if test="data.publishedTime != null">
            AND published_time = #{data.publishedTime}
        </if>
        <if test="data.recruitTimeLimit != null">
            AND recruit_time_limit = #{data.recruitTimeLimit}
        </if>
        <if test="data.recruitFinishTime != null">
            AND recruit_finish_time = #{data.recruitFinishTime}
        </if>
        <if test="data.taskFinishLimit != null">
            AND task_finish_limit = #{data.taskFinishLimit}
        </if>
        <if test="data.fee != null">
            AND fee = #{data.fee}
        </if>
        <if test="data.status != null">
            AND status = #{data.status}
        </if>
        <if test="data.images != null">
            AND images = #{data.images}
        </if>
        <if test="data.accepted != null">
            AND accepted = #{data.accepted}
        </if>
        <if test="data.id != null">
            AND id = #{data.id}
        </if>
        <if test="data.gmtCreate != null">
            AND gmt_create = #{data.gmtCreate}
        </if>
        <if test="data.gmtModified != null">
            AND gmt_modified = #{data.gmtModified}
        </if>
        <if test="ins != null">
            AND
            <foreach collection="ins" item="item" open="(" separator="and" close=")">
                ${item.column} in
                <foreach collection="item.values" item="item" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </foreach>
        </if>
        <if test="notIns != null">
            AND
            <foreach collection="notIns" item="item" open="(" separator="and" close=")">
                ${item.column} not in
                <foreach collection="item.values" item="item" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </foreach>
        </if>
        <if test="equals != null and equals != ''">
            AND
            <foreach collection="equals" item="item" open="(" separator="and" close=")">
                ${item.column} = #{item.value}
            </foreach>
        </if>
        <if test="notEquals != null and notEquals != ''">
            AND
            <foreach collection="notEquals" item="item" open="(" separator="and" close=")">
                ${item.column} = #{item.value}
            </foreach>
        </if>
        <if test="lts != null">
            AND
            <foreach collection="lts" item="item" open="(" separator="and" close=")">
                ${item.column} <![CDATA[ < ]]> #{item.value}
            </foreach>
        </if>
        <if test="gts != null">
            AND
            <foreach collection="gts" item="item" open="(" separator="and" close=")">
                ${item.column} <![CDATA[ > ]]> #{item.value}
            </foreach>
        </if>
        <if test="likes != null and likes != ''">
            AND
            <foreach collection="likes" item="item" open="(" separator="and" close=")">
                ${item.column} like concat('%', #{item.value}, '%')
            </foreach>
        </if>
        <if test="ltes != null">
            AND
            <foreach collection="ltes" item="item" open="(" separator="and" close=")">
                ${item.column} <![CDATA[ <= ]]> #{item.value}
            </foreach>
        </if>
        <if test="gtes != null">
            AND
            <foreach collection="gtes" item="item" open="(" separator="and" close=")">
                ${item.column} <![CDATA[ >= ]]> #{item.value}
            </foreach>
        </if>
        <if test="ranges != null">
            AND
            <foreach collection="ranges" item="item" open="(" separator="and" close=")">
                ${item.column} <![CDATA[ >= ]]> #{item.from} and ${item.column} <![CDATA[ < ]]> #{item.to}
            </foreach>
        </if>
        AND is_delete = 0
    </trim>
</sql>


<insert id="insert" useGeneratedKeys="true" keyProperty="id" parameterType="io.milkt.onelab.organization.domain.RequirementDO">
    insert into requirement
    (
        <include refid="requirementDO_sqlForInsert"/>
        ,is_delete
    )
    values
    (
        <include refid="requirementDO_columnsForInsert"/>
        ,0
    )
</insert>

<update id="update" parameterType="io.milkt.onelab.organization.domain.RequirementDO">
    update requirement
    <include refid="requirementDO_setterForUpdate" />
    where id = #{id}
    and is_delete = 0
</update>


<update id="updateByQuery" parameterType="io.milkt.onelab.organization.domain.RequirementDO">
    update requirement
    <set>
        gmt_modified = now(),
        <if test="update.type != null">
            type = #{update.type},
        </if>
        <if test="update.labId != null">
            lab_id = #{update.labId},
        </if>
        <if test="update.organizationId != null">
            organization_id = #{update.organizationId},
        </if>
        <if test="update.description != null">
            description = #{update.description},
        </if>
        <if test="update.feeRange != null">
            fee_range = #{update.feeRange},
        </if>
        <if test="update.publishedTime != null">
            published_time = #{update.publishedTime},
        </if>
        <if test="update.recruitTimeLimit != null">
            recruit_time_limit = #{update.recruitTimeLimit},
        </if>
        <if test="update.recruitFinishTime != null">
            recruit_finish_time = #{update.recruitFinishTime},
        </if>
        <if test="update.taskFinishLimit != null">
            task_finish_limit = #{update.taskFinishLimit},
        </if>
        <if test="update.fee != null">
            fee = #{update.fee},
        </if>
        <if test="update.status != null">
            status = #{update.status},
        </if>
        <if test="update.images != null">
            images = #{update.images},
        </if>
        <if test="update.accepted != null">
            accepted = #{update.accepted},
        </if>
    </set>
    <include refid="requirementDO_query_segment"/>
</update>


<insert id="insertOrUpdate" useGeneratedKeys="true" keyProperty="id" parameterType="io.milkt.onelab.organization.domain.RequirementDO">
    insert into requirement
    (
        <include refid="requirementDO_sqlForInsert"/>
        ,is_delete
    )
    values
    (
        <include refid="requirementDO_columnsForInsert"/>
        ,0
    )
    on duplicate key update
    gmt_modified = now()
    ,is_delete = 0
    <if test="type != null">
        ,type = #{type}
    </if>
    <if test="labId != null">
        ,lab_id = #{labId}
    </if>
    <if test="organizationId != null">
        ,organization_id = #{organizationId}
    </if>
    <if test="description != null">
        ,description = #{description}
    </if>
    <if test="feeRange != null">
        ,fee_range = #{feeRange}
    </if>
    <if test="publishedTime != null">
        ,published_time = #{publishedTime}
    </if>
    <if test="recruitTimeLimit != null">
        ,recruit_time_limit = #{recruitTimeLimit}
    </if>
    <if test="recruitFinishTime != null">
        ,recruit_finish_time = #{recruitFinishTime}
    </if>
    <if test="taskFinishLimit != null">
        ,task_finish_limit = #{taskFinishLimit}
    </if>
    <if test="fee != null">
        ,fee = #{fee}
    </if>
    <if test="status != null">
        ,status = #{status}
    </if>
    <if test="images != null">
        ,images = #{images}
    </if>
    <if test="accepted != null">
        ,accepted = #{accepted}
    </if>
</insert>

<!-- Delete -->
<update id="delete">
    update requirement
    set is_delete = 1, gmt_modified = now()
    <include refid="requirementDO_query_segment"/>
</update>
<update id="deleteById">
    update requirement
    set is_delete = 1, gmt_modified = now()
    where id = #{id}
</update>





<!-- query class -->
<sql id="requirementDO_groupBy">
    <if test="groupBys != null and groupBys != ''">
        group by
        <foreach collection="groupBys" item="item" open="" separator="," close="">
            #{item}
        </foreach>
    </if>
</sql>

<sql id="requirementDO_orderby">
    <if test="orderBys != null and orderBys != ''">
        order by
        <foreach collection="orderBys" item="item" open="" separator="," close="">
            ${item.column} ${item.direction}
        </foreach>
    </if>
</sql>


<select id="query" resultMap="requirementDOResult" parameterType="io.milkt.onelab.organization.domain.RequirementDO">
    <include refid="requirementDO_selector"/>
    <include refid="requirementDO_query_segment"/>
    <include refid="requirementDO_groupBy"/>
    <include refid="requirementDO_orderby"/>
</select>

<select id="query4Page" resultMap="requirementDOResult" parameterType="io.milkt.onelab.organization.domain.RequirementDO">
    <include refid="requirementDO_selector"/>
    <include refid="requirementDO_query_segment"/>
    <include refid="requirementDO_groupBy"/>
    <include refid="requirementDO_orderby"/>
    limit ${startRowForMysql}, ${pageSize}
</select>


<select id="count" resultType="java.lang.Long">
    SELECT COUNT(1) FROM requirement
    <include refid="requirementDO_query_segment"/>
</select>

<select id="getById" resultMap="requirementDOResult">
    <include refid="requirementDO_selector"/>
    where id = #{id}
    and is_delete = 0
</select>

<select id="getByIdForUpdate" resultMap="requirementDOResult">
    <include refid="requirementDO_selector"/>
    where id = #{id}
    and is_delete = 0
    for update
</select>

</mapper>
