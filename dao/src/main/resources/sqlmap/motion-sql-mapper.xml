<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="io.milkt.onelab.organization.dao.MotionDao">

<resultMap id="motionDOResult" type="io.milkt.onelab.organization.domain.MotionDO">
    <result column="mobile" property="mobile"/>
    <result column="expected_fee" property="expectedFee"/>
    <result column="description" property="description"/>
    <result column="motion_time" property="motionTime"/>
    <result column="status" property="status"/>
    <result column="requirement_id" property="requirementId"/>
    <result column="user_id" property="userId"/>
    <result column="id" property="id"/>
    <result column="gmt_create" property="gmtCreate"/>
    <result column="gmt_modified" property="gmtModified"/>
</resultMap>

<sql id="motionDO_columns">
    mobile,
    expected_fee,
    description,
    motion_time,
    status,
    requirement_id,
    user_id,
    id,
    gmt_create,
    gmt_modified
</sql>

<sql id="motionDO_sqlForInsert">
    mobile,
    expected_fee,
    description,
    motion_time,
    status,
    requirement_id,
    user_id,
    id,
    gmt_create,
    gmt_modified
</sql>

<sql id="motionDO_columnsForInsert">
    #{mobile},
    #{expectedFee},
    #{description},
    #{motionTime},
    #{status},
    #{requirementId},
    #{userId},
    #{id},
    now(),
    now()
</sql>

<sql id="motionDO_setterForUpdate">
    <set>
        gmt_modified = now(),
        <if test="mobile != null">
            mobile = #{mobile},
        </if>
        <if test="expectedFee != null">
            expected_fee = #{expectedFee},
        </if>
        <if test="description != null">
            description = #{description},
        </if>
        <if test="motionTime != null">
            motion_time = #{motionTime},
        </if>
        <if test="status != null">
            status = #{status},
        </if>
        <if test="requirementId != null">
            requirement_id = #{requirementId},
        </if>
        <if test="userId != null">
            user_id = #{userId},
        </if>
    </set>
</sql>

<sql id="motionDO_selector">
    select
    <include refid="motionDO_columns"/>
    from motion
</sql>

<sql id="motionDO_query_segment">
    <trim prefix="WHERE" prefixOverrides="AND|OR">
        <if test="data.mobile != null">
            AND mobile = #{data.mobile}
        </if>
        <if test="data.expectedFee != null">
            AND expected_fee = #{data.expectedFee}
        </if>
        <if test="data.description != null">
            AND description = #{data.description}
        </if>
        <if test="data.motionTime != null">
            AND motion_time = #{data.motionTime}
        </if>
        <if test="data.status != null">
            AND status = #{data.status}
        </if>
        <if test="data.requirementId != null">
            AND requirement_id = #{data.requirementId}
        </if>
        <if test="data.userId != null">
            AND user_id = #{data.userId}
        </if>
        <if test="data.id != null">
            AND id = #{data.id}
        </if>
        <if test="data.gmtCreate != null">
            AND gmt_create = #{data.gmtCreate}
        </if>
        <if test="data.gmtModified != null">
            AND gmt_modified = #{data.gmtModified}
        </if>
        <if test="ins != null">
            AND
            <foreach collection="ins" item="item" open="(" separator="and" close=")">
                ${item.column} in
                <foreach collection="item.values" item="item" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </foreach>
        </if>
        <if test="notIns != null">
            AND
            <foreach collection="notIns" item="item" open="(" separator="and" close=")">
                ${item.column} not in
                <foreach collection="item.values" item="item" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </foreach>
        </if>
        <if test="equals != null and equals != ''">
            AND
            <foreach collection="equals" item="item" open="(" separator="and" close=")">
                ${item.column} = #{item.value}
            </foreach>
        </if>
        <if test="notEquals != null and notEquals != ''">
            AND
            <foreach collection="notEquals" item="item" open="(" separator="and" close=")">
                ${item.column} = #{item.value}
            </foreach>
        </if>
        <if test="lts != null">
            AND
            <foreach collection="lts" item="item" open="(" separator="and" close=")">
                ${item.column} <![CDATA[ < ]]> #{item.value}
            </foreach>
        </if>
        <if test="gts != null">
            AND
            <foreach collection="gts" item="item" open="(" separator="and" close=")">
                ${item.column} <![CDATA[ > ]]> #{item.value}
            </foreach>
        </if>
        <if test="likes != null and likes != ''">
            AND
            <foreach collection="likes" item="item" open="(" separator="and" close=")">
                ${item.column} like concat('%', #{item.value}, '%')
            </foreach>
        </if>
        <if test="ltes != null">
            AND
            <foreach collection="ltes" item="item" open="(" separator="and" close=")">
                ${item.column} <![CDATA[ <= ]]> #{item.value}
            </foreach>
        </if>
        <if test="gtes != null">
            AND
            <foreach collection="gtes" item="item" open="(" separator="and" close=")">
                ${item.column} <![CDATA[ >= ]]> #{item.value}
            </foreach>
        </if>
        <if test="ranges != null">
            AND
            <foreach collection="ranges" item="item" open="(" separator="and" close=")">
                ${item.column} <![CDATA[ >= ]]> #{item.from} and ${item.column} <![CDATA[ < ]]> #{item.to}
            </foreach>
        </if>
        AND is_delete = 0
    </trim>
</sql>


<insert id="insert" useGeneratedKeys="true" keyProperty="id" parameterType="io.milkt.onelab.organization.domain.MotionDO">
    insert into motion
    (
        <include refid="motionDO_sqlForInsert"/>
        ,is_delete
    )
    values
    (
        <include refid="motionDO_columnsForInsert"/>
        ,0
    )
</insert>

<update id="update" parameterType="io.milkt.onelab.organization.domain.MotionDO">
    update motion
    <include refid="motionDO_setterForUpdate" />
    where id = #{id}
    and is_delete = 0
</update>


<update id="updateByQuery" parameterType="io.milkt.onelab.organization.domain.MotionDO">
    update motion
    <set>
        gmt_modified = now(),
        <if test="update.mobile != null">
            mobile = #{update.mobile},
        </if>
        <if test="update.expectedFee != null">
            expected_fee = #{update.expectedFee},
        </if>
        <if test="update.description != null">
            description = #{update.description},
        </if>
        <if test="update.motionTime != null">
            motion_time = #{update.motionTime},
        </if>
        <if test="update.status != null">
            status = #{update.status},
        </if>
        <if test="update.requirementId != null">
            requirement_id = #{update.requirementId},
        </if>
        <if test="update.userId != null">
            user_id = #{update.userId},
        </if>
    </set>
    <include refid="motionDO_query_segment"/>
</update>


<insert id="insertOrUpdate" useGeneratedKeys="true" keyProperty="id" parameterType="io.milkt.onelab.organization.domain.MotionDO">
    insert into motion
    (
        <include refid="motionDO_sqlForInsert"/>
        ,is_delete
    )
    values
    (
        <include refid="motionDO_columnsForInsert"/>
        ,0
    )
    on duplicate key update
    gmt_modified = now()
    ,is_delete = 0
    <if test="mobile != null">
        ,mobile = #{mobile}
    </if>
    <if test="expectedFee != null">
        ,expected_fee = #{expectedFee}
    </if>
    <if test="description != null">
        ,description = #{description}
    </if>
    <if test="motionTime != null">
        ,motion_time = #{motionTime}
    </if>
    <if test="status != null">
        ,status = #{status}
    </if>
    <if test="requirementId != null">
        ,requirement_id = #{requirementId}
    </if>
    <if test="userId != null">
        ,user_id = #{userId}
    </if>
</insert>

<!-- Delete -->
<update id="delete">
    update motion
    set is_delete = 1, gmt_modified = now()
    <include refid="motionDO_query_segment"/>
</update>
<update id="deleteById">
    update motion
    set is_delete = 1, gmt_modified = now()
    where id = #{id}
</update>





<!-- query class -->
<sql id="motionDO_groupBy">
    <if test="groupBys != null and groupBys != ''">
        group by
        <foreach collection="groupBys" item="item" open="" separator="," close="">
            #{item}
        </foreach>
    </if>
</sql>

<sql id="motionDO_orderby">
    <if test="orderBys != null and orderBys != ''">
        order by
        <foreach collection="orderBys" item="item" open="" separator="," close="">
            ${item.column} ${item.direction}
        </foreach>
    </if>
</sql>


<select id="query" resultMap="motionDOResult" parameterType="io.milkt.onelab.organization.domain.MotionDO">
    <include refid="motionDO_selector"/>
    <include refid="motionDO_query_segment"/>
    <include refid="motionDO_groupBy"/>
    <include refid="motionDO_orderby"/>
</select>

<select id="query4Page" resultMap="motionDOResult" parameterType="io.milkt.onelab.organization.domain.MotionDO">
    <include refid="motionDO_selector"/>
    <include refid="motionDO_query_segment"/>
    <include refid="motionDO_groupBy"/>
    <include refid="motionDO_orderby"/>
    limit ${startRowForMysql}, ${pageSize}
</select>


<select id="count" resultType="java.lang.Long">
    SELECT COUNT(1) FROM motion
    <include refid="motionDO_query_segment"/>
</select>

<select id="getById" resultMap="motionDOResult">
    <include refid="motionDO_selector"/>
    where id = #{id}
    and is_delete = 0
</select>

<select id="getByIdForUpdate" resultMap="motionDOResult">
    <include refid="motionDO_selector"/>
    where id = #{id}
    and is_delete = 0
    for update
</select>

</mapper>
